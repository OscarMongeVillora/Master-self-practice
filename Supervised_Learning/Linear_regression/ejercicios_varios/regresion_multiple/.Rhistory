color = ~sexo, colors = c('red', 'blue')) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'altura'),
yaxis = list(title = 'cintura'),
zaxis = list(title = 'peso')))
# #Hacemos un grafico en 4D para sexo masculino y femenino con las variables altura y cintura
p <- plot_ly(my_data, x = ~altura, y = ~cintura, z = ~peso ,
color = ~sexo, colors = c('red', 'blue')) %>%
add_markers() %>%
plotly::layout(scene = list(xaxis = list(title = 'altura'),
yaxis = list(title = 'cintura'),
zaxis = list(title = 'peso')))
# #Hacemos un grafico en 4D para sexo masculino y femenino con las variables altura y cintura
p <- plot_ly(my_data, x = ~altura, y = ~cintura, z = ~peso ,
color = ~sexo, colors = c('red', 'blue')) %>%
add_markers() %>%
plotly::layout(scene = list(xaxis = list(title = 'altura'),
yaxis = list(title = 'cintura'),
zaxis = list(title = 'peso')))
p
#Hacemos un grafico en 3D para cintura y cadera a?adiendo el plano
p <- plot_ly(my_data_male,
x = ~cintura,
y = ~cadera,
z = ~peso,
type = "scatter3d",
mode = "markers")
#Graph Resolution (more important for more complex shapes)
graph_reso <- 0.05
#Setup Axis
axis_x <- seq(min(my_data_male$cintura), max(my_data_male$cintura), by = graph_reso)
axis_y <- seq(min(my_data_male$cadera), max(my_data_male$cadera), by = graph_reso)
#Sample points
lm_surface <- expand.grid(cintura = axis_x,cadera = axis_y,KEEP.OUT.ATTRS = F)
lm_surface$peso <- predict(model6, newdata = lm_surface,type = "response")
lm_surface <- acast(lm_surface, cadera ~ cintura, value.var = "peso") #y ~ x
p<-  add_trace(p = p,
z = lm_surface,
x = axis_x,
y = axis_y,
type = "surface")
p
#Hacemos un grafico en 3D para cintura y cadera a?adiendo el plano
p <- plot_ly(my_data_male,
x = ~cintura,
y = ~cadera,
z = ~peso,
type = "scatter3d",
mode = "markers")
p
#Setup Axis
axis_x <- seq(min(my_data_male$cintura), max(my_data_male$cintura), by = graph_reso)
axis_y <- seq(min(my_data_male$cadera), max(my_data_male$cadera), by = graph_reso)
axis_x
axis_y
#Setup Axis
axis_x <- seq(min(my_data_male$cintura), max(my_data_male$cintura), by = graph_reso)
axis_y <- seq(min(my_data_male$cadera), max(my_data_male$cadera), by = graph_reso)
#Sample points
lm_surface <- expand.grid(cintura = axis_x,cadera = axis_y,KEEP.OUT.ATTRS = F)
lm_surface$peso <- predict(model6, newdata = lm_surface,type = "response")
lm_surface <- acast(lm_surface, cadera ~ cintura, value.var = "peso") #y ~ x
p<-  add_trace(p = p,
z = lm_surface,
x = axis_x,
y = axis_y,
type = "surface")
p
?acast
predictorvalues<-function(x1,x2,x3,model, type){
if (is.character(type)==T){
new<-data.frame(altura=x1,cintura=x2,cadera=x3)
predict.lm(model,new,interval=type)
}
else print("Debe introducir una variable del tipo 'character', como por ejemplo \n 'confidences'") #condicionamiento de la funciÃ³n
}
predictorvalues(66,37.95,43,model7,"confidence")
?predict
------------------------------------------------------------------------------------------ #
if (!require("plotly")){install.packages("plotly",verbose = F) ; library("plotly")}
if (!require("later")){install.packages("later",verbose = F) ; library("later")}
if (!require("stats")){install.packages("stats",verbose = F) ; library("stats")}
if (!require("reshape2")){install.packages("reshape2",verbose = F) ; library("reshape2")}
print("All packages and functions have been installed or loaded...")
#-----------------------------------------
rm(list=ls())
#Lectura de datos
my_data<-read.table("./data_in/peso_data.txt", header=T) #Lee los datos del archivo
is.datatable(my_data)
is.matrix(my_data)
is.datatable(my_data)
is.dataframe(my_data)
library(datatable)
library(data.table)
is.data.table(my_data)
?read.table
is.data.frame(my_data)
my_data_male<-my_data[which(my_data$sexo=="male"),]
my_data_male
my_data_male2<-my_data[my_data$sexo=="male",]
my_data_male2
#Lectura de datos
my_data<-read.table("./data_in/peso_data.txt", header=T) #Lee los datos del archivo
is.data.frame(my_data)
my_data_male<-my_data[which(my_data$sexo=="male"),]
my_data_male
my_data_male2<-my_data[my_data$sexo=="male",]
my_data_male2
#Ajustamos modelos
y<-my_data_male$peso #la variable respuesta es el Peso
x1<-my_data_male$altura #variable x1 determinada por Altura
x2<-my_data_male$cintura #variable x2 determinada por Cintura
x3<-my_data_male$cadera #variable x3 determinada por Cadera
model1<-lm(y~x1)
model2<-lm(y~x2)
model3<-lm(y~x3)
summary(model1)
summary(model2)
model3<-lm(y~x3)
summary(model3)
summary(model2)
plot(x1,y,col=4,xlab="Altura",ylab="Peso", main="Peso vs. Altura")
#Realizamos una visualizacion
par(mfrow = c( 1, 3 ))
plot(x1,y,col=4,xlab="Altura",ylab="Peso", main="Peso vs. Altura")
abline(model1,col=2)
plot(x2,y,col=4,xlab="Cintura",ylab="Peso", main="Peso vs. Cintura")
abline(model2,col=2)
plot(x3,y,col=4,xlab="Cadera",ylab="Peso",  main="Peso vs. Cadera")
abline(model3,col=2)
title(main="Rectas de Regresi\u00f3n Lineal para cada variable explicativa",
outer=T,cex.main=2)
title(main="Rectas de Regresi\u00f3n Lineal para cada variable explicativa",
outer=T,cex.main=3)
title(main="Rectas de Regresi\u00f3n Lineal para cada variable explicativa",
outer=T,cex.main=4)
title(main="Rectas de Regresi\u00f3n Lineal para cada variable explicativa",
outer=T,cex.main=2)
par(mfrow = c( 1, 3 ))
plot(x1,y,col=4,xlab="Altura",ylab="Peso", main="Peso vs. Altura")
abline(model1,col=2)
plot(x2,y,col=4,xlab="Cintura",ylab="Peso", main="Peso vs. Cintura")
abline(model2,col=2)
plot(x3,y,col=4,xlab="Cadera",ylab="Peso",  main="Peso vs. Cadera")
abline(model3,col=2)
title(main="Rectas de Regresi\u00f3n Lineal para cada variable explicativa",
outer=T,cex.main=2)
plot(x1,y,col=4,xlab="Altura",ylab="Peso", main="Peso vs. Altura")
abline(model1,col=2)
plot(x2,y,col=4,xlab="Cintura",ylab="Peso", main="Peso vs. Cintura")
abline(model2,col=2)
plot(x3,y,col=4,xlab="Cadera",ylab="Peso",  main="Peso vs. Cadera")
abline(model3,col=2)
title(main="Rectas de Regresi\u00f3n Lineal para cada variable explicativa",
outer=T,cex.main=1)
title(main="Rectas de Regresi\u00f3n Lineal para cada variable explicativa",
outer=F,cex.main=1)
plot(x1,y,col=4,xlab="Altura",ylab="Peso", main="Peso vs. Altura")
abline(model1,col=2)
plot(x2,y,col=4,xlab="Cintura",ylab="Peso", main="Peso vs. Cintura")
abline(model2,col=2)
plot(x3,y,col=4,xlab="Cadera",ylab="Peso",  main="Peso vs. Cadera")
abline(model3,col=2)
title(main="Rectas de Regresi\u00f3n Lineal para cada variable explicativa",
outer=F,cex.main=1)
par(mfrow = c( 1, 3 ))
plot(x1,y,col=4,xlab="Altura",ylab="Peso", main="Peso vs. Altura")
abline(model1,col=2)
plot(x2,y,col=4,xlab="Cintura",ylab="Peso", main="Peso vs. Cintura")
abline(model2,col=2)
plot(x3,y,col=4,xlab="Cadera",ylab="Peso",  main="Peso vs. Cadera")
abline(model3,col=2)
title(main="Rectas de Regresi\u00f3n Lineal para cada variable explicativa",
outer=F,cex.main=1)
title(main="Rectas de Regresi\u00f3n Lineal para cada variable explicativa",
outer=T,cex.main=1)
plot(x1,y,col=4,xlab="Altura",ylab="Peso", main="Peso vs. Altura")
abline(model1,col=2)
plot(x2,y,col=4,xlab="Cintura",ylab="Peso", main="Peso vs. Cintura")
abline(model2,col=2)
plot(x3,y,col=4,xlab="Cadera",ylab="Peso",  main="Peso vs. Cadera")
abline(model3,col=2)
title(main="Rectas de Regresi\u00f3n Lineal para cada variable explicativa",
outer=T,cex.main=1)
?plot
?title
plot(x1,y,col=4,xlab="Altura",ylab="Peso", main="Peso vs. Altura")
abline(model1,col=2)
plot(x2,y,col=4,xlab="Cintura",ylab="Peso", main="Peso vs. Cintura")
abline(model2,col=2)
plot(x3,y,col=4,xlab="Cadera",ylab="Peso",  main="Peso vs. Cadera")
abline(model3,col=2)
title(main="Rectas de Regresi\u00f3n Lineal para cada variable explicativa",
outer=T,cex.main=1)
plot(x1,y,col=4,xlab="Altura",ylab="Peso", main="Peso vs. Altura")
abline(model1,col=2)
plot(x2,y,col=4,xlab="Cintura",ylab="Peso", main="Peso vs. Cintura")
abline(model2,col=2)
plot(x3,y,col=4,xlab="Cadera",ylab="Peso",  main="Peso vs. Cadera")
abline(model3,col=2)
title(main="Rectas de Regresi\u00f3n Lineal para cada variable explicativa",
outer=F,cex.main=1)
plot(x1,y,col=4,xlab="Altura",ylab="Peso", main="Peso vs. Altura")
abline(model1,col=2)
plot(x2,y,col=4,xlab="Cintura",ylab="Peso", main="Peso vs. Cintura")
abline(model2,col=2)
plot(x3,y,col=4,xlab="Cadera",ylab="Peso",  main="Peso vs. Cadera")
abline(model3,col=2)
title(main="Rectas de Regresi\u00f3n Lineal para cada variable explicativa",
outer=T,cex.main=1)
?abline
model4<-lm(peso~altura+cintura,data = my_data_male)
model5<-lm(peso~altura+cadera,data = my_data_male)
model6<-lm(peso~cintura+cadera,data = my_data_male)
model7<-lm(peso~altura+cintura+cadera,data = my_data_male)
summary(model4)
summary(model5)
model6<-lm(peso~cintura+cadera,data = my_data_male)
summary(model6)
summary(model7)
summary(model6)
summary(model5)
summary(model4)
summary(model5)
summary(model4)
my_data_male3<-my_data[~sexo=="male",]
p <- plot_ly(my_data, x = ~altura, y = ~cintura, z = ~peso ,
color = ~sexo, colors = c('red', 'blue')) %>%
add_markers() %>%
plotly::layout(scene = list(xaxis = list(title = 'altura'),
yaxis = list(title = 'cintura'),
zaxis = list(title = 'peso')))
p
p
#Hacemos un grafico en 3D para cintura y cadera a?adiendo el plano
p <- plot_ly(my_data_male,
x = ~cintura,
y = ~cadera,
z = ~peso,
type = "scatter3d",
mode = "markers")
p
p <- plot_ly(my_data, x = ~altura, y = ~cintura, z = ~peso ,
color = ~sexo, colors = c('red', 'blue'))
p
p <- plot_ly(my_data, x = ~altura, y = ~cintura, z = ~peso ,
color = ~sexo, colors = c('red', 'blue'))%>%
add_markers()
p
p <- plot_ly(my_data, x = ~altura, y = ~cintura, z = ~peso ,
color = ~sexo, colors = c('red', 'blue'))
p
p <- plot_ly(my_data, x = ~altura, y = ~cintura, z = ~peso ,
color = ~sexo, colors = c('red', 'blue'))%>%
add_markers()
p
p <- plot_ly(my_data, x = ~altura, y = ~cintura, z = ~peso ,
color = ~sexo, colors = c('red', 'blue'))%>%
add_markers() %>%
plotly::layout(scene = list(xaxis = list(title = 'altura'),
yaxis = list(title = 'cintura'),
zaxis = list(title = 'peso')))
p
p <- plot_ly(my_data_male,
x = ~cintura,
y = ~cadera,
z = ~peso,
color = ~sexo, colors = c('red', 'blue'),
type = "scatter3d",
mode = "markers")
p
p <- plot_ly(my_data_male,
x = ~cintura,
y = ~cadera,
z = ~peso,
color = ~sexo,
colors = c('red', 'blue'),
type = "scatter3d",
mode = "markers")
p
p <- plot_ly(my_data, x = ~altura, y = ~cintura, z = ~peso ,
color = ~sexo, colors = c('red', 'blue'))
p
p <- plot_ly(my_data_male,
x = ~cintura,
y = ~cadera,
z = ~peso,
color = ~sexo,
colors = c('red', 'blue'))
p
p <- plot_ly(my_data_male,
x = ~cintura,
y = ~cadera,
z = ~peso)
p
p <- plot_ly(my_data_male,
x = ~cintura,
y = ~cadera,
z = ~peso,
type = "scatter3d",
mode = "markers")
p
p <- plot_ly(my_data,
x = ~cintura,
y = ~cadera,
z = ~peso,
type = "scatter3d",
color = ~sexo, colors = c('red', 'blue'),
mode = "markers")
p
#Graph Resolution (more important for more complex shapes)
graph_reso <- 0.05
#Setup Axis
axis_x <- seq(min(my_data_male$cintura), max(my_data_male$cintura), by = graph_reso)
axis_y <- seq(min(my_data_male$cadera), max(my_data_male$cadera), by = graph_reso)
#Sample points
lm_surface <- expand.grid(cintura = axis_x,cadera = axis_y,KEEP.OUT.ATTRS = F)
lm_surface
tail(lm_surface)
lm_surface$peso <- predict(model6, newdata = lm_surface,type = "response")
lm_surface <- acast(lm_surface, cadera ~ cintura, value.var = "peso") #y ~ x
p<-  add_trace(p = p,
z = lm_surface,
x = axis_x,
y = axis_y,
type = "surface")
p
#Sample points
lm_surface <- expand.grid(cintura = axis_x,cadera = axis_y,KEEP.OUT.ATTRS = T)
lm_surface
#Sample points
lm_surface <- expand.grid(cintura = axis_x,cadera = axis_y,KEEP.OUT.ATTRS = T)
lm_surface
lm_surface.out.attrs
lm_surface$out.attrs
lm_surface$peso <- predict(model6, newdata = lm_surface,type = "response")
lm_surface <- acast(lm_surface, cadera ~ cintura, value.var = "peso") #y ~ x
#Setup Axis
axis_x <- seq(min(my_data_male$cintura), max(my_data_male$cintura), by = graph_reso)
axis_y <- seq(min(my_data_male$cadera), max(my_data_male$cadera), by = graph_reso)
#Sample points
lm_surface <- expand.grid(cintura = axis_x,cadera = axis_y,KEEP.OUT.ATTRS = T)
lm_surface
?predict
#Sample points
lm_surface <- expand.grid(cintura = axis_x,cadera = axis_y,KEEP.OUT.ATTRS = T)
lm_surface$peso <- predict(model6, newdata = lm_surface,type = "response")
lm_surface
#Ajustamos modelos
y<-my_data_male$peso #la variable respuesta es el Peso
y
lm_surface
lm_surface$peso <- predict(model6, newdata = lm_surface,type = "class")
lm_surface$peso <- predict(model6, newdata = lm_surface,type = "terms")
lm_surface
lm_surface$peso <- predict(model6, newdata = lm_surface)
e
lm_surface
lm_surface$peso <- predict(model6)
lm_surface$peso <- predict(model6)
lm_surface$peso2 <- predict(model6)
?predict
lm_surface$peso2 <- predict(model6)
lm_surface
lm_surface$peso2 <- predict(model6)
?acast
lm_surface <- acast(lm_surface, cadera ~ cintura, value.var = "peso") #y ~ x
lm_surface
lm_surface
size(lm_surface)
dim(lm_surface)
lm_surface$peso <- predict(model6, newdata = lm_surface,type = "response")
lm_surface <- acast(lm_surface, cadera ~ cintura, value.var = "peso") #y ~ x
rm(list=ls())
#Lectura de datos
my_data<-read.table("./data_in/peso_data.txt", header=T) #Lee los datos del archivo
is.data.frame(my_data)
my_data_male<-my_data[which(my_data$sexo=="male"),]
my_data_male
my_data_male2<-my_data[my_data$sexo=="male",]
my_data_male2
#Ajustamos modelos
y<-my_data_male$peso #la variable respuesta es el Peso
x1<-my_data_male$altura #variable x1 determinada por Altura
x2<-my_data_male$cintura #variable x2 determinada por Cintura
x3<-my_data_male$cadera #variable x3 determinada por Cadera
model1<-lm(y~x1)
model2<-lm(y~x2)
model3<-lm(y~x3)
summary(model1)
summary(model2)
summary(model3)
#Realizamos una visualizacion
par(mfrow = c( 1, 3 ))
plot(x1,y,col=4,xlab="Altura",ylab="Peso", main="Peso vs. Altura")
abline(model1,col=2)
plot(x2,y,col=4,xlab="Cintura",ylab="Peso", main="Peso vs. Cintura")
abline(model2,col=2)
plot(x3,y,col=4,xlab="Cadera",ylab="Peso",  main="Peso vs. Cadera")
abline(model3,col=2)
title(main="Rectas de Regresi\u00f3n Lineal para cada variable explicativa",
outer=T,cex.main=1)
#Regresion lineal multiple
model4<-lm(peso~altura+cintura,data = my_data_male)
model5<-lm(peso~altura+cadera,data = my_data_male)
model6<-lm(peso~cintura+cadera,data = my_data_male)
model7<-lm(peso~altura+cintura+cadera,data = my_data_male)
summary(model4)
summary(model5)
summary(model6)
summary(model7)
graph_reso <- 0.05
#Setup Axis
axis_x <- seq(min(my_data_male$cintura), max(my_data_male$cintura), by = graph_reso)
axis_y <- seq(min(my_data_male$cadera), max(my_data_male$cadera), by = graph_reso)
#Sample points
lm_surface <- expand.grid(cintura = axis_x,cadera = axis_y,KEEP.OUT.ATTRS = T)
lm_surface
lm_surface$peso <- predict(model6, newdata = lm_surface,type = "response")
lm_surface <- acast(lm_surface, cadera ~ cintura, value.var = "peso") #y ~ x
lm_surface
p<-  add_trace(p = p,
z = lm_surface,
x = axis_x,
y = axis_y,
type = "surface")
p
p<-  add_trace(p = p,
z = lm_surface,
x = axis_x,
y = axis_y,
type = "surface")
p<-  add_trace(p,
z = lm_surface,
x = axis_x,
y = axis_y,
type = "surface")
p<-  add_trace(p="p",
z = lm_surface,
x = axis_x,
y = axis_y,
type = "surface")
p<-  add_trace(p="p",
z = lm_surface,
x = axis_x,
y = axis_y,
type = "surface")
p<-  add_trace(p=p,
z = lm_surface,
x = axis_x,
y = axis_y,
type = "surface")
p <- plot_ly(my_data,
x = ~cintura,
y = ~cadera,
z = ~peso,
type = "scatter3d",
mode = "markers")
p<-  add_trace(p=p,
z = lm_surface,
x = axis_x,
y = axis_y,
type = "surface")
p
lm_surface
model6<-lm(peso~cintura+cadera,data = my_data_male)
summary(model6)
summary(model5)
summary(model4)
summary(model6)
summary(model4)
dim(lm_surface)
dim(axis_y)
length(axis_y)
p<-  add_trace(p=p,
z = lm_surface,
x = axis_x,
y = axis_y,
type = "surface")
p<-  add_trace(p=p,
z = lm_surface$peso,
x = axis_x,
y = axis_y,
type = "surface")
?add_trace
predictorvalues<-function(x1,x2,x3,model, type){
if (is.character(type)==T){
new<-data.frame(altura=x1,cintura=x2,cadera=x3)
predict.lm(model,new,interval=type)
}
else print("Debe introducir una variable del tipo 'character', como por ejemplo \n 'confidences'") #condicionamiento de la funciÃ³n
}
predictorvalues(66,37.95,43,model7,"confidence")
predictorvalues<-function(x1,x2,x3,model, type){
if (is.character(type)==T){
new<-data.frame(altura=x1,cintura=x2,cadera=x3)
predict(model,new,interval=type)
}
else print("Debe introducir una variable del tipo 'character', como por ejemplo \n 'confidences'") #condicionamiento de la funciÃ³n
}
predictorvalues(66,37.95,43,model7,"confidence")
predict(modelo, dataframe_nuevos_datos,tipo_estimacion)
#Predecir el sexo de una persona de acuerdo a los datos
predictorvalues<-function(x1,x2,x3,model, type){
if (is.character(type)==T){
new<-data.frame(altura=x1,cintura=x2,cadera=x3)
predict(model,new,interval=type)
}
else print("Debe introducir una variable del tipo 'character', como por ejemplo \n 'confidences'") #condicionamiento de la funciÃ³n
}
predictorvalues(66,37.95,43,model7,"confidence")
?predict
