m8<-glm(Y~X1+X2+X4+X6, binomial(link = "logit"), data = my_data_train)
anova(m8, test="Chi")
m8<-glm(Y~X1+X2+X3+X4+X5+X6+X7, binomial(link = "logit"), data = my_data_train)
summary(m8)
m8<-glm(Y~X1+X2+X3+X4+X5+X6, binomial(link = "logit"), data = my_data_train)
#Eliminamos X5
model<-glm(Y~X1+X2+X3+X4+X6, binomial(link = "logit"), data = my_data_train)
#Comparando Con el modelo con todas las variables
anova(m8,model, test="Chi")
?confint
exp(confint(m8,level=0.9))
m8<-glm(Y~X1+X2+X4+X6, binomial(link = "logit"), data = my_data_train)
exp(confint(m8,level=0.9))
confint.default
getAnywhere(confint.lm)
exp(confint(m8,level=0.9))
exp(confint(m8,level=0.9))
exp(confint(m8,level=0.9))
m8<-glm(Y~X1+X2+X4+X6, binomial(link = "logit"), data = my_data_train)
exp(confint(m8,level=0.9))
confint(m8,level=0.9)
m8<-glm(Y~X1+X2+X4+X6, binomial(link = "logit"), data = my_data_train)
glm(Y~X1+X2+X4+X6, binomial(link = "logit"), data = my_data_train)
exp(glm(Y~X1+X2+X4+X6, binomial(link = "logit"), data = my_data_train))
m8<-glm(Y~X1+X2+X4+X6, binomial(link = "logit"), data = my_data_train)
m8<-glm(Y~X1+X2+X4+X6, binomial(link = "logit"), data = my_data_train)
m8
confint(m8,level=0.9)
m8<-glm(Y~X1+X2+X4+X6, binomial(link = "logit"), data = my_data_train)
anova(m8, test="Chi")
m8
exp(confint(m8,level=0.9))
confint(m8,level=0.9)
exp(coefficients(m8))
coefficients(m8)
my_data_test <-my_data[401:800,]
#load dataset, you can use choose file also
my_data<-as.data.frame(fread("./data_in/data_scoring.csv",
header = TRUE))
my_data_train<-my_data[1:400,]
my_data_test <-my_data[401:800,]
my_data_train$Y<-ifelse(my_data_train$Y=="malo",0,1)
m8<-glm(Y~X1+X2+X4+X6, binomial(link = "logit"), data = my_data_train)
my_predict = predict(m8, data = my_data_test)
############################Pregunta 5#######################################
my_predict
my_data
my_pred<-predict(m8,newdata= my_data_train,type = "response")
my_pred
my_predict = predict(m8, data = my_data_test)
############################Pregunta 5#######################################
my_predict
my_predict = predict(m8, data = my_data_test)
############################Pregunta 5#######################################
my_predict
my_pred<-predict(m8,newdata= my_data_train,type = "response")
############################Pregunta 5#######################################
my_predict
my_pred<-predict(m8,newdata= my_data_train,type = "response")
exp(my_pred)
exp(my_pred) / (exp(my_pred) + 1)
my_pred<-predict(m8,newdata= my_data_train,type = "response")
############################Pregunta 5#######################################
my_predict
exp(my_pred) / (exp(my_pred) + 1)
pred_cutoff<-function(epsilon,pred){
result<-ifelse(pred < epsilon,0,1)
return(result)
}
pred_cutoff_03 <- pred_cutoff(0.3,my_pred)
pred_cutoff_05 <- pred_cutoff(0.5,my_pred)
pred_cutoff_08 <- pred_cutoff(0.8,my_pred)
pred_cutoff_03
pred_cutoff_03 <- pred_cutoff(0.3,my_pred)
pred_cutoff_08
my_data_train$Y<-ifelse(my_data_train$Y=="malo",1,0)
m8<-glm(Y~X1+X2+X4+X6, binomial(link = "logit"), data = my_data_train)
confint(m8,level=0.9)
m8<-glm(Y~X1+X2+X4+X6, binomial(link = "logit"), data = my_data_train)
#load dataset, you can use choose file also
my_data<-as.data.frame(fread("./data_in/data_scoring.csv",
header = TRUE))
my_data_train<-my_data[1:400,]
my_data_train$Y<-ifelse(my_data_train$Y=="malo",1,0)
m8<-glm(Y~X1+X2+X3+X4+X5+X6+X7, binomial(link = "logit"), data = my_data_train)
m8<-glm(Y~X1+X2+X4+X6, binomial(link = "logit"), data = my_data_train)
confint(m8,level=0.9)
exp(coefficients(m8))
my_data_train$Y<-ifelse(my_data_train$Y=="malo",0,1)
#load dataset, you can use choose file also
my_data<-as.data.frame(fread("./data_in/data_scoring.csv",
header = TRUE))
my_data_train<-my_data[1:400,]
my_data_train$Y<-ifelse(my_data_train$Y=="malo",0,1)
m8<-glm(Y~X1+X2+X3+X4+X5+X6+X7, binomial(link = "logit"), data = my_data_train)
confint(m8,level=0.9)
m8<-glm(Y~X1+X2+X4+X6, binomial(link = "logit"), data = my_data_train)
confint(m8,level=0.9)
exp(coefficients(m8))
my_pred<-predict(m8,newdata= my_data_train,type = "response")
my_pred
m8<-glm(Y~X1+X2+X4+X6, binomial(link = "logit"), data = my_data_train)
exp(confint(m8,level=0.9))
#load dataset, you can use choose file also
my_data<-as.data.frame(fread("./data_in/data_scoring.csv",
header = TRUE))
my_data_train<-my_data[1:400,]
my_data_train$Y<-ifelse(my_data_train$Y=="malo",0,1)
m8<-glm(Y~X1+X2+X4+X6, binomial(link = "logit"), data = my_data_train)
exp(confint(m8,level=0.9))
exp(coefficients(m8))
my_pred<-predict(m8,newdata= my_data_train,type = "response")
my_pred
mdef <- glm(Y ~ X1+X2+X4+X6, family = binomial(link="logit"),
data = my_data_train)
coefficients(mdef)
exp(coefficients(mdef))
exp(confint(mdef, level=0.9))
exp(confint(mdef, level=0.95))
exp(confint(mdef, level=0.9))
my_pred <- predict(mdef, data = my_data_train, tpe = "response")
my_pred
my_pred <- predict(mdef, data = my_data_train, type = "response")
my_pred
cutoff <- function(cut, my_pred) {
paid <- ifelse(my_pred < cut, 0, 1)
return(paid)
}
cutoff(0.3, my_pred)
cutoff <- function(cut, pred) {
paid <- ifelse(pred < cut, 0, 1)
return(paid)
}
cutoff(0.3, my_pred)
pred_cut3 <- cutoff(0.3, my_pred)
pred_cut5 <- cutoff(0.5, my_pred)
pred_cut8 <- cutoff(0.8, my_pred)
?table
conf_matrix3 <- table(expected = pred_cut3, real = my_data_train$Y)
conf_matrix3
conf_matrix3 <- table(expected = pred_cut3, real = my_data_train$Y)
conf_matrix3
conf_matrix3
accuracy = diag(conf_matrix3) / sum(conf_matrix3)
accuracy
diag(conf_matrix3)
accuracy = sum(diag(conf_matrix3)) / sum(conf_matrix3)
accuracy
tpr = conf_matrix3[2, 2]/ conf_matrix3[2, 2] + conf_matrix3[1, 2]
tpr
tpr = conf_matrix3[2, 2]/ (conf_matrix3[2, 2] + conf_matrix3[1, 2])
tpr
tnr = conf_matrix3[1, 1]/ (conf_matrix3[1, 1] + conf_matrix3[2, 1])
tnr
conf_matrix_03[2,2]/(conf_matrix_03[2,2]+conf_matrix_03[1,2]) #tpr
conf_matrix_03<-table(pred=pred_cutoff_03,actual= my_data_train$Y)
conf_matrix_03[2,2]/(conf_matrix_03[2,2]+conf_matrix_03[1,2]) #tpr
conf_matrix_03[1,1]/(conf_matrix_03[1,1]+conf_matrix_03[2,1]) #tnr
sum(diag(conf_matrix_05))/sum(conf_matrix_05)
conf_matrix_05<-table(pred=pred_cutoff_05,actual= my_data_train$Y)
conf_matrix_08<-table(pred=pred_cutoff_08,actual= my_data_train$Y)
sum(diag(conf_matrix_05))/sum(conf_matrix_05)
conf_matrix_05[2,2]/(conf_matrix_05[2,2]+conf_matrix_05[1,2]) #tpr
conf_matrix_05[1,1]/(conf_matrix_05[1,1]+conf_matrix_05[2,1]) #tnr
sum(diag(conf_matrix_08))/sum(conf_matrix_08)
conf_matrix_08[2,2]/(conf_matrix_08[2,2]+conf_matrix_08[1,2]) #tpr
conf_matrix_08[1,1]/(conf_matrix_08[1,1]+conf_matrix_08[2,1]) #tnr
sum(diag(conf_matrix_03))/sum(conf_matrix_03)
sum(diag(conf_matrix_03))/sum(conf_matrix_03)
conf_matrix_03[2,2]/(conf_matrix_03[2,2]+conf_matrix_03[1,2]) #tpr
conf_matrix_03[1,1]/(conf_matrix_03[1,1]+conf_matrix_03[2,1]) #tnr
sum(diag(conf_matrix_05))/sum(conf_matrix_05)
conf_matrix_05[2,2]/(conf_matrix_05[2,2]+conf_matrix_05[1,2]) #tpr
conf_matrix_05[1,1]/(conf_matrix_05[1,1]+conf_matrix_05[2,1]) #tnr
sum(diag(conf_matrix_08))/sum(conf_matrix_08)
conf_matrix_08[2,2]/(conf_matrix_08[2,2]+conf_matrix_08[1,2]) #tpr
conf_matrix_08[1,1]/(conf_matrix_08[1,1]+conf_matrix_08[2,1]) #tnr
conf_matrix_03<-table(pred=pred_cutoff_03,actual= my_data_train$Y)
conf_matrix_03
for(i in c(1:100)/100) {
conf_matrix <- table(cutoff(i), my_pred)
acc[i] <- sum(diag(conf_matrix))/sum(conf_matrix)
tpr[i] <- conf_matrix[2,2]/(conf_matrix[2,2]+conf_matrix[1,2]) #tpr
tnr[i] <- conf_matrix[1,1]/(conf_matrix[1,1]+conf_matrix[2,1])
}
for(i in c(1:100)/100) {
conf_matrix <- table(cutoff(i), my_pred))
acc[i] <- sum(diag(conf_matrix))/sum(conf_matrix)
tpr[i] <- conf_matrix[2,2]/(conf_matrix[2,2]+conf_matrix[1,2]) #tpr
tnr[i] <- conf_matrix[1,1]/(conf_matrix[1,1]+conf_matrix[2,1])
}
for(i in c(1:100)/100) {
conf_matrix <- table(cutoff(i), my_pred)
acc[i] <- sum(diag(conf_matrix))/sum(conf_matrix)
tpr[i] <- conf_matrix[2,2]/(conf_matrix[2,2]+conf_matrix[1,2]) #tpr
tnr[i] <- conf_matrix[1,1]/(conf_matrix[1,1]+conf_matrix[2,1])
}
for(i in c(1:100)/100) {
conf_matrix <- table(cutoff(i, my_pred), my_data_train$Y)
acc[i] <- sum(diag(conf_matrix))/sum(conf_matrix)
tpr[i] <- conf_matrix[2,2]/(conf_matrix[2,2]+conf_matrix[1,2]) #tpr
tnr[i] <- conf_matrix[1,1]/(conf_matrix[1,1]+conf_matrix[2,1])
}
[]
acc <- c()
tpr <- c()
tnr <- c()
for(i in c(1:100)/100) {
conf_matrix <- table(cutoff(i, my_pred), my_data_train$Y)
acc[i] <- sum(diag(conf_matrix))/sum(conf_matrix)
tpr[i] <- conf_matrix[2,2]/(conf_matrix[2,2]+conf_matrix[1,2]) #tpr
tnr[i] <- conf_matrix[1,1]/(conf_matrix[1,1]+conf_matrix[2,1])
}
for(i in c(1:100)) {
conf_matrix <- table(cutoff(i/100, my_pred), my_data_train$Y)
acc[i] <- sum(diag(conf_matrix))/sum(conf_matrix)
tpr[i] <- conf_matrix[2,2]/(conf_matrix[2,2]+conf_matrix[1,2]) #tpr
tnr[i] <- conf_matrix[1,1]/(conf_matrix[1,1]+conf_matrix[2,1])
}
conf_matrix <- table(cutoff(i/100, my_pred), my_data_train$Y)
acc[i] <- sum(diag(conf_matrix))/sum(conf_matrix)
tpr[i] <- conf_matrix[2,2]/(conf_matrix[2,2]+conf_matrix[1,2]) #tpr
tnr[i] <- conf_matrix[1,1]/(conf_matrix[1,1]+conf_matrix[2,1])
conf_matrix
for(i in c(1:100)) {
conf_matrix <- table( exp = cutoff(i/100, my_pred), real = my_data_train$Y)
conf_matrix
acc[i] <- sum(diag(conf_matrix))/sum(conf_matrix)
tpr[i] <- conf_matrix[2,2]/(conf_matrix[2,2]+conf_matrix[1,2]) #tpr
tnr[i] <- conf_matrix[1,1]/(conf_matrix[1,1]+conf_matrix[2,1])
}
conf_matrix
my_pred <- predict(mdef, data = my_data_train, type = "response")
acc <- c()
tpr <- c()
tnr <- c()
for(i in c(1:100)) {
conf_matrix <- table( exp = cutoff(i/100, my_pred), real = my_data_train$Y)
conf_matrix
acc[i] <- sum(diag(conf_matrix))/sum(conf_matrix)
tpr[i] <- conf_matrix[2,2]/(conf_matrix[2,2]+conf_matrix[1,2]) #tpr
tnr[i] <- conf_matrix[1,1]/(conf_matrix[1,1]+conf_matrix[2,1])
}
acc <- c()
tpr <- c()
tnr <- c()
for(i in c(1:100)) {
conf_matrix <- table(expec = cutoff(i/100, my_pred), real = my_data_train$Y)
conf_matrix
acc[i] <- sum(diag(conf_matrix))/sum(conf_matrix)
tpr[i] <- conf_matrix[2,2]/(conf_matrix[2,2]+conf_matrix[1,2]) #tpr
tnr[i] <- conf_matrix[1,1]/(conf_matrix[1,1]+conf_matrix[2,1])
acc <- c()
tpr <- c()
tnr <- c()
for(i in c(1:100)) {
conf_matrix <- table(expec = cutoff(i/100, my_pred), real = my_data_train$Y)
conf_matrix
acc[i] <- sum(diag(conf_matrix))/sum(conf_matrix)
tpr[i] <- conf_matrix[2,2]/(conf_matrix[2,2]+conf_matrix[1,2]) #tpr
tnr[i] <- conf_matrix[1,1]/(conf_matrix[1,1]+conf_matrix[2,1])
}
acc
tnr
if (!require("MASS")){install.packages("MASS",quiet = T) ; library("MASS")}
if (!require("data.table")){install.packages("data.table",quiet = T) ; library("data.table")}
if (!require("stats")){install.packages("stats",quiet = T) ; library("stats")}
if (!require("verification")){install.packages("verification",quiet = T) ; library("verification")}
if (!require("rBayesianOptimization")){install.packages("rBayesianOptimization",quiet = T) ; library("rBayesianOptimization")}
cred <- as.data.frame(fread("./data_in/data_scoring.csv", header=TRUE,
na.strings = c("")))
my_data_train = cred[1:400, ]
my_data_train$Y = ifelse(my_data_train$Y == "malo", 0, 1)
mdef <- glm(Y ~ X1+X2+X4+X6, family = binomial(link="logit"),
data = my_data_train)
my_pred <- predict(mdef, data = my_data_train, type = "response")
cutoff <- function(cut, pred) {
paid <- ifelse(pred < cut, 0, 1)
return(paid)
}
acc <- c()
tpr <- c()
tnr <- c()
for(i in c(1:100)) {
conf_matrix <- table(expec = cutoff(i/100, my_pred), real = my_data_train$Y)
conf_matrix
acc[i] <- sum(diag(conf_matrix))/sum(conf_matrix)
tpr[i] <- conf_matrix[2,2]/(conf_matrix[2,2]+conf_matrix[1,2]) #tpr
tnr[i] <- conf_matrix[1,1]/(conf_matrix[1,1]+conf_matrix[2,1])
}
conf_matrix
acc <- c()
tpr <- c()
tnr <- c()
for(i in c(2:99)) {
conf_matrix <- table(expec = cutoff(i/100, my_pred), real = my_data_train$Y)
conf_matrix
acc[i-1] <- sum(diag(conf_matrix))/sum(conf_matrix)
tpr[i-1] <- conf_matrix[2,2]/(conf_matrix[2,2]+conf_matrix[1,2]) #tpr
tnr[i-1] <- conf_matrix[1,1]/(conf_matrix[1,1]+conf_matrix[2,1])
}
for(i in c(10:80)) {
conf_matrix <- table(expec = cutoff(i/100, my_pred), real = my_data_train$Y)
conf_matrix
acc[i-9] <- sum(diag(conf_matrix))/sum(conf_matrix)
tpr[i-9] <- conf_matrix[2,2]/(conf_matrix[2,2]+conf_matrix[1,2]) #tpr
tnr[i-9] <- conf_matrix[1,1]/(conf_matrix[1,1]+conf_matrix[2,1])
}
conf_matrix
acc <- c()
tpr <- c()
tnr <- c()
for(i in c(30:80)) {
conf_matrix <- table(expec = cutoff(i/100, my_pred), real = my_data_train$Y)
conf_matrix
acc[i-29] <- sum(diag(conf_matrix))/sum(conf_matrix)
tpr[i-29] <- conf_matrix[2,2]/(conf_matrix[2,2]+conf_matrix[1,2]) #tpr
tnr[i-29] <- conf_matrix[1,1]/(conf_matrix[1,1]+conf_matrix[2,1])
}
acc
df = data.frame(acc, tpr, tnr)
df
plot(df)
plot(df)
plot(acc)
plot(tpr)
?plot
df = data.frame(acc, tpr, tnr)
df2 <- melt(df, measure.vars = c("acc", "tpr", "tnr"))
plot(df2)
library(ggplot2)
df2
acc <- c()
tpr <- c()
tnr <- c()
eps <- c()
for(i in c(30:80)) {
conf_matrix <- table(expec = cutoff(i/100, my_pred), real = my_data_train$Y)
conf_matrix
acc[i-29] <- sum(diag(conf_matrix))/sum(conf_matrix)
tpr[i-29] <- conf_matrix[2,2]/(conf_matrix[2,2]+conf_matrix[1,2]) #tpr
tnr[i-29] <- conf_matrix[1,1]/(conf_matrix[1,1]+conf_matrix[2,1])
eps[i-29] = i
}
df <- data.frame(i, acc, tpr, tnr)
df2 <- melt(df, id_vars = i, measure.vars = c("acc", "tpr", "tnr"))
df
eps
df <- data.frame(eps, acc, tpr, tnr)
df2 <- melt(df, id_vars = i, measure.vars = c("acc", "tpr", "tnr"))
df2
ggplot(data = df2,
aes(x = "eps",
y = "value",
color = "variable")) +
geom_point()
ggplot(data = df2,
aes(x = "eps",
y = "value",
colour = "variable")) +
geom_point()
ggplot(data = df2,
aes(x = eps,
y = value,
colour = variable)) +
geom_point()
for(i in c(30:80)) {
conf_matrix <- table(expec = cutoff(i/100, my_pred), real = my_data_train$Y)
conf_matrix
acc[i-29] <- sum(diag(conf_matrix))/sum(conf_matrix)
tpr[i-29] <- conf_matrix[2,2]/(conf_matrix[2,2]+conf_matrix[1,2]) #tpr
tnr[i-29] <- conf_matrix[1,1]/(conf_matrix[1,1]+conf_matrix[2,1])
eps[i-29] = i
}
df <- data.frame(eps, acc, tpr, tnr)
df2 <- melt(df, id_vars = i, measure.vars = c("acc", "tpr", "tnr"))
library(ggplot2)
ggplot(data = df2,
aes(x = eps,
y = value,
colour = variable)) +
geom_point()+
xlim(60, 70)
df2[df2$eps == 65, ]
ggplot(data = df2,
aes(x = eps,
y = value,
colour = variable)) +
geom_point()
max(acc)
df[df$acc == max(acc)]
df[df$acc == max(df$acc)]
df[df$acc == max(df$acc),]
df[df$acc == max(acc),]
df[acc == max(acc),]
#load dataset, you can use choose file also
my_data<-as.data.frame(fread("./data_in/data_scoring.csv",sep=";"))
my_data$Y<-ifelse(my_data$Y=="malo",0,1)
my_data<-my_data[sample(1:nrow(my_data)),]
my_data_test<-my_data[1:(nrow(my_data)*0.2),]
my_data_train<-my_data[setdiff(rownames(my_data),rownames(my_data_test)),]
my_data_train_0<-my_data_train[which(my_data_train$Y==0),]
my_data_train_1<-my_data_train[which(my_data_train$Y==1),]
epsilon<-seq(length=100, from=0, to=1)
df<-data.frame(accuracy=rep(0,100),epsilon)
Y<-my_data_train$Y
for(i in 1:100){
print(i)
PYeq1<-ifelse(my_pred<epsilon[i],0,1)
confusion_matrix<-table(PYeq1,Y)
df$accuracy[i]<-sum(diag(confusion_matrix))/(sum(confusion_matrix))
}
my_pred<-predict(m8,newdata= my_data_train,type = "response")
m8<-glm(Y~X1+X2+X4+X6, binomial(link = "logit"), data = my_data_train)
#load dataset, you can use choose file also
my_data<-as.data.frame(fread("./data_in/data_scoring.csv",
header = TRUE))
my_data_train<-my_data[1:400,]
my_data_train$Y<-ifelse(my_data_train$Y=="malo",0,1)
m8<-glm(Y~X1+X2+X4+X6, binomial(link = "logit"), data = my_data_train)
my_pred<-predict(m8,newdata= my_data_train,type = "response")
pred_cutoff<-function(epsilon,pred){
result<-ifelse(pred < epsilon,0,1)
return(result)
}
r<-roc.area(my_data_train$Y,my_pred)
roc.plot(my_data_train$Y,my_pred,main=paste0("Curva ROC con AUC=", r$A))
?roc.area
install.packages("ISLR")
library(ISLR)
College
College
datos <- College
is.na(datos)
sapply(datos, sum(is.na(x))
sapply(datos, sum(is.na(x)))
sapply(datos,function(x) sum(is.na(x)))
a <- c(1, 2, "NA", 3)
is.na(a)
a <- c(1, 2, NA, 3)
is.na(a)
install.packages("glmnet")
libary(glmnet)
library(glmnet)
head(datos)
datos <- datos[sample(1:nrow(datos)),]
datos_train <- datos[1: round((2/3)*nrow(datos)),]
datos_test <- datos[setdiff(rownames(datos), rownames(datos_train)), ]
?model.matrix
datos.train.mat <- model.matrix(Apps ~ ., data = datos_train)
datos.test.mat <- model.matrix(Apps ~ ., data = datos_test)
datos.train.mat
datos.train.mat
head(datos.train.mat)
head(datos_train)
shape(datos.train.mat)
size(datos.train.mat)
dim(datos.train.mat)
dim(datos_train)
head(datos.train.mat)
head(datos_train)
10 ^ seq(from = 4, to = -2, length = 100)
rnorm(2)
?rnorm
n <- 1000  # Number of observations
p <- 5000  # Number of predictors included in model
real_p <- 15
x <- matrix(rnorm(n*p), nrow=n, ncol=p)
apply(x[,1:15], 1, sum)
apply(x[,1:15], 1, sum)
head(apply(x[,1:15], 1, sum))
head(apply(x[,1:15], 1, sum))
rnorm(3)
x <- matrix(rnorm(4, 2, 2))
x
x <- matrix(rnorm(4), 2, 2)
x
x <- matrix(rnorm(n*p), nrow=n, ncol=p)
head(apply(x[,1:15], 1, sum))
x <- matrix(c(1, 2, 3, 4), 2, 2)
aa <- matrix(c(1, 2, 3, 4), 2, 2)
aa <- matrix(c(1:15), 3, 5))
aa <- matrix(c(1:15), 3, 5)
aa <- matrix(c(1:15), 3, 5)
aa
apply(aa[,1:3], 1, sum)
?apply
?glmnet
a <- c(1, 2, 3)
index <- c(2, 3)
a[-index]
a
a <- c(8, 4, 5)
index <- c(2, 3)
a[-index]
a[index]
?plot.glmnet
train <- sample(x = 1:nrow(datos), size = round(nrow(datos) * (2/3)))
datos.train <- datos[train, ]
datos.test <- datos[-train, ]
datos
datos$train
assign(a,c(1, 2, 3))
assign("a",c(1, 2, 3))
a
?predict.cv.glmnet
?predict.glmnet
?predict.cv.gelmet
?predict.cv.glmnet
?predict.glmnet
a <- c(1, 2, 3)
a^2
