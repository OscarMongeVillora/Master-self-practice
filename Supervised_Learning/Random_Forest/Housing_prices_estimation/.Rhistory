roow <- tail(xy_test, 1)
xy_tomorrow <- data.frame(X1 = roow[2], X2 = roow[3], X3 = roow[4],
X4 = roow[5], X5 = roow[8])
xy_tomorrow <- data.frame(xy_tomorrow, AX = xy_tomorrow[,5] - xy_tomorrow[,4])
xy_tomorrow <- data.frame(xy_tomorrow, AAX = xy_tomorrow[,5] - 2 *xy_tomorrow[,4]
+ xy_tomorrow[,3])
model3 <- lm(y ~ X5 + AX + AAX, data = xy_train)
prediction <- predict(model3, newdata = xy_tomorrow)
predict_com <- append(predict_com, prediction)
lastday <- append(lastday, roow[8])
}
c1 <- unlist(lastday, use.names=FALSE)
c2 <- unlist(predict_com, use.names=FALSE)
data.frame(c1, c2)
sum(c2) - sum(c1)
tail(df_1, 19)
sum(c1)
acum_deaths <- sum(tail(df_1$Fallecidos, 19))
acum_deaths
c1
sum(c1)
sum(c2)
#Prediction tomorrow para todas las comunidades
predict_com <- c()
lastday <- c()
for(i in 1:length(unique(df_1$Comunidad))){
C.A <- df_1$Comunidad[i]
K <- 10 #Indice para fallecidos
M <- 5 #Indice para UCI
unique(df_1$Comunidad)
datos_com <- df_1[df_1$Comunidad == C.A, c(2, 5, 6)]
long <- dim(datos_com)[1]
datos_com <- datos_com[1: long,]
datos_xy <- matrix(rep(0, (long - K) * K), ncol = K)
for(i in 1: (long - K)){
datos_xy[i, ]<- rbind(datos_com[i: (K + i - 1), 3])
}
datos_xy <- data.frame(datos_xy, AX = datos_xy[,5] - datos_xy[,4])
datos_xy <- data.frame(datos_xy, AAX = datos_xy[,5] - 2 *datos_xy[,4]
+ datos_xy[,3])
datos_xy <- data.frame(datos_xy, y = datos_com[(K + 1) : long , 3] )
train <- 1:round((dim(datos_xy)[1]) * 0.8)
xy_train <- datos_xy[train,]
xy_test <- datos_xy[-train,]
roow <- tail(xy_test, 1)
xy_tomorrow <- data.frame(X1 = roow[2], X2 = roow[3], X3 = roow[4],
X4 = roow[5], X5 = roow[8])
xy_tomorrow <- data.frame(xy_tomorrow, AX = xy_tomorrow[,5] - xy_tomorrow[,4])
xy_tomorrow <- data.frame(xy_tomorrow, AAX = xy_tomorrow[,5] - 2 *xy_tomorrow[,4]
+ xy_tomorrow[,3])
model3 <- lm(y ~ X5 + AX + AAX, data = xy_train)
prediction <- predict(model3, newdata = xy_tomorrow)
predict_com <- append(predict_com, prediction)
lastday <- append(lastday, roow[8])
}
c1 <- unlist(lastday, use.names=FALSE)
c2 <- unlist(predict_com, use.names=FALSE)
data.frame(c1, c2)
sum(c2) - sum(c1)
tail(datos_xy)
head(datos_xy)
xy_tomorrow <- data.frame(roow[2:K], roow[-1])
colnames(xy_tomorrow)
roow[-1]
tail(roow,1)
xy_tomorrow <- data.frame(roow[2:K], row[end]))
xy_tomorrow <- data.frame(roow[2:K], row[end])
xy_tomorrow <- data.frame(roow[2:K], roow[end])
a <- c(1, 2, 3)
a[end]
a[1:]
a[1::]
a[-1]
a[-2]
a[-3]
a[-4]
a[-5]
a[last]
tail(a, 1)
colnames(xy_tomorrow)
xy_tomorrow <- data.frame(roow[2:K], roow[K+3])
colnames(xy_tomorrow)
a[10]
colnames(xy_tomorrow) <- colnames(xy_test)
########################################################
#######################################################
#Prediction tomorrow para todas las comunidades
predict_com <- c()
lastday <- c()
for(i in 1:length(unique(df_1$Comunidad))){
C.A <- df_1$Comunidad[i]
K <- 10 #Indice para fallecidos
M <- 5 #Indice para UCI
unique(df_1$Comunidad)
datos_com <- df_1[df_1$Comunidad == C.A, c(2, 5, 6)]
long <- dim(datos_com)[1]
datos_com <- datos_com[1: long,]
datos_xy <- matrix(rep(0, (long - K) * K), ncol = K)
for(i in 1: (long - K)){
datos_xy[i, ]<- rbind(datos_com[i: (K + i - 1), 3])
}
datos_xy <- data.frame(datos_xy, AX = datos_xy[,K] - datos_xy[,K-1])
datos_xy <- data.frame(datos_xy, AAX = datos_xy[,K] - 2 *datos_xy[,K-1]
+ datos_xy[,K-2])
datos_xy <- data.frame(datos_xy, y = datos_com[(K + 1) : long , 3] )
train <- 1:round((dim(datos_xy)[1]) * 0.8)
xy_train <- datos_xy[train,]
xy_test <- datos_xy[-train,]
roow <- tail(xy_test, 1)
xy_tomorrow <- data.frame(roow[2:K], roow[K+3])
colnames(xy_tomorrow) <- colnames(xy_test)
for(j in 1:K){
paste0("X",j)
}
#xy_tomorrow <- data.frame(X1 = roow[2], X2 = roow[3], X3 = roow[4],
#X4 = roow[5], X5 = roow[8])
xy_tomorrow <- data.frame(xy_tomorrow, AX = xy_tomorrow[,K] - xy_tomorrow[,K-1])
xy_tomorrow <- data.frame(xy_tomorrow, AAX = xy_tomorrow[,K] - 2 *xy_tomorrow[,K-1]
+ xy_tomorrow[,K-2])
model3 <- lm(y ~ X5 + AX + AAX, data = xy_train)
prediction <- predict(model3, newdata = xy_tomorrow)
predict_com <- append(predict_com, prediction)
lastday <- append(lastday, roow[8])
}
dim(xy_test)
dim(xy_tomorrow)
xy_tomorrow <- data.frame(roow[2:K], roow[K+3], row[K+1], row[K+2])
xy_tomorrow <- data.frame(roow[2:K], c(roow[K+3], row[K+1], row[K+2]))
xy_tomorrow <- data.frame(roow[2:K], roow[K+3], roow[K+1], roow[K+2])
colnames(xy_tomorrow) <- colnames(xy_test)[1:K+2]
########################################################
#######################################################
#Prediction tomorrow para todas las comunidades
predict_com <- c()
lastday <- c()
for(i in 1:length(unique(df_1$Comunidad))){
C.A <- df_1$Comunidad[i]
K <- 10 #Indice para fallecidos
M <- 5 #Indice para UCI
unique(df_1$Comunidad)
datos_com <- df_1[df_1$Comunidad == C.A, c(2, 5, 6)]
long <- dim(datos_com)[1]
datos_com <- datos_com[1: long,]
datos_xy <- matrix(rep(0, (long - K) * K), ncol = K)
for(i in 1: (long - K)){
datos_xy[i, ]<- rbind(datos_com[i: (K + i - 1), 3])
}
datos_xy <- data.frame(datos_xy, AX = datos_xy[,K] - datos_xy[,K-1])
datos_xy <- data.frame(datos_xy, AAX = datos_xy[,K] - 2 *datos_xy[,K-1]
+ datos_xy[,K-2])
datos_xy <- data.frame(datos_xy, y = datos_com[(K + 1) : long , 3] )
train <- 1:round((dim(datos_xy)[1]) * 0.8)
xy_train <- datos_xy[train,]
xy_test <- datos_xy[-train,]
roow <- tail(xy_test, 1)
xy_tomorrow <- data.frame(roow[2:K], roow[K+3], roow[K+1], roow[K+2])
colnames(xy_tomorrow) <- colnames(xy_test)[1:K+2]
for(j in 1:K){
paste0("X",j)
}
#xy_tomorrow <- data.frame(X1 = roow[2], X2 = roow[3], X3 = roow[4],
#X4 = roow[5], X5 = roow[8])
xy_tomorrow <- data.frame(xy_tomorrow, AX = xy_tomorrow[,K] - xy_tomorrow[,K-1])
xy_tomorrow <- data.frame(xy_tomorrow, AAX = xy_tomorrow[,K] - 2 *xy_tomorrow[,K-1]
+ xy_tomorrow[,K-2])
model3 <- lm(y ~ X5 + AX + AAX, data = xy_train)
prediction <- predict(model3, newdata = xy_tomorrow)
predict_com <- append(predict_com, prediction)
lastday <- append(lastday, roow[8])
}
roow
xy_tomorrow
xy_tomorrow
xy_tomorrow2 <- data.frame(roow[2:K], roow[K+3], roow[K+1], roow[K+2])
xy_tomorrow2
colnames(xy_test)
xy_tomorrow <-data.frame()
rm(list = ls())
#Reproducir esto hasta ggplot2
library("lubridate")
library(data.table)
df <- data.frame(read.csv("serie_historica_acumulados_2.csv",
na.strings = c("", "NA")))
df$Fecha <- as.Date(df$Fecha, format = "%d/%m/%Y")
sapply(df, class)
colnames(df)[1] <- "Comunidad"
interval <- (day(df$Fecha) < 8 & month(df$Fecha) == 3) | (month(df$Fecha) < 3)
df_nan <- df[interval,]
df_1 <- df[!interval,]
df_0day <- df_nan[day(df_nan$Fecha) == 7 & month(df_nan$Fecha) == 3,]
len_1 <- length(unique(df$Comunidad))
len_1
########################################################
#######################################################
#Prediction tomorrow para todas las comunidades
predict_com <- c()
lastday <- c()
for(i in 1:length(unique(df_1$Comunidad))){
C.A <- df_1$Comunidad[i]
K <- 10 #Indice para fallecidos
M <- 5 #Indice para UCI
unique(df_1$Comunidad)
datos_com <- df_1[df_1$Comunidad == C.A, c(2, 5, 6)]
long <- dim(datos_com)[1]
datos_com <- datos_com[1: long,]
datos_xy <- matrix(rep(0, (long - K) * K), ncol = K)
for(i in 1: (long - K)){
datos_xy[i, ]<- rbind(datos_com[i: (K + i - 1), 3])
}
datos_xy <- data.frame(datos_xy, AX = datos_xy[,K] - datos_xy[,K-1])
datos_xy <- data.frame(datos_xy, AAX = datos_xy[,K] - 2 *datos_xy[,K-1]
+ datos_xy[,K-2])
datos_xy <- data.frame(datos_xy, y = datos_com[(K + 1) : long , 3] )
train <- 1:round((dim(datos_xy)[1]) * 0.8)
xy_train <- datos_xy[train,]
xy_test <- datos_xy[-train,]
xy_tomorrow <-data.frame()
roow <- tail(xy_test, 1)
xy_tomorrow <- data.frame(roow[2:K], roow[K+3], roow[K+1], roow[K+2])
colnames(xy_tomorrow) <- colnames(xy_test)[1:K+2]
#xy_tomorrow <- data.frame(X1 = roow[2], X2 = roow[3], X3 = roow[4],
#X4 = roow[5], X5 = roow[8])
xy_tomorrow <- data.frame(xy_tomorrow, AX = xy_tomorrow[,K] - xy_tomorrow[,K-1])
xy_tomorrow <- data.frame(xy_tomorrow, AAX = xy_tomorrow[,K] - 2 *xy_tomorrow[,K-1]
+ xy_tomorrow[,K-2])
model3 <- lm(y ~ X5 + AX + AAX, data = xy_train)
prediction <- predict(model3, newdata = xy_tomorrow)
predict_com <- append(predict_com, prediction)
lastday <- append(lastday, roow[8])
}
roow
xy_tomorrow
########################################################
#######################################################
#Prediction tomorrow para todas las comunidades
predict_com <- c()
lastday <- c()
for(i in 1:length(unique(df_1$Comunidad))){
C.A <- df_1$Comunidad[i]
K <- 10 #Indice para fallecidos
M <- 5 #Indice para UCI
unique(df_1$Comunidad)
datos_com <- df_1[df_1$Comunidad == C.A, c(2, 5, 6)]
long <- dim(datos_com)[1]
datos_com <- datos_com[1: long,]
datos_xy <- matrix(rep(0, (long - K) * K), ncol = K)
for(i in 1: (long - K)){
datos_xy[i, ]<- rbind(datos_com[i: (K + i - 1), 3])
}
datos_xy <- data.frame(datos_xy, AX = datos_xy[,K] - datos_xy[,K-1])
datos_xy <- data.frame(datos_xy, AAX = datos_xy[,K] - 2 *datos_xy[,K-1]
+ datos_xy[,K-2])
datos_xy <- data.frame(datos_xy, y = datos_com[(K + 1) : long , 3] )
train <- 1:round((dim(datos_xy)[1]) * 0.8)
xy_train <- datos_xy[train,]
xy_test <- datos_xy[-train,]
xy_tomorrow <-data.frame()
roow <- tail(xy_test, 1)
xy_tomorrow <- data.frame(roow[2:K], roow[K+3])
colnames(xy_tomorrow) <- colnames(xy_test)[1:K]
#xy_tomorrow <- data.frame(X1 = roow[2], X2 = roow[3], X3 = roow[4],
#X4 = roow[5], X5 = roow[8])
xy_tomorrow <- data.frame(xy_tomorrow, AX = xy_tomorrow[,K] - xy_tomorrow[,K-1])
xy_tomorrow <- data.frame(xy_tomorrow, AAX = xy_tomorrow[,K] - 2 *xy_tomorrow[,K-1]
+ xy_tomorrow[,K-2])
model3 <- lm(y ~ X5 + AX + AAX, data = xy_train)
prediction <- predict(model3, newdata = xy_tomorrow)
predict_com <- append(predict_com, prediction)
lastday <- append(lastday, roow[8])
}
xy_tomorrow
c1 <- unlist(lastday, use.names=FALSE)
c2 <- unlist(predict_com, use.names=FALSE)
data.frame(c1, c2)
sum(c2) - sum(c1)
model3 <- lm(y ~ paste0(X5,K) + AX + AAX, data = xy_train)
paste0(X,K)
paste0("X",K)
########################################################
#######################################################
#Prediction tomorrow para todas las comunidades
predict_com <- c()
lastday <- c()
for(i in 1:length(unique(df_1$Comunidad))){
C.A <- df_1$Comunidad[i]
K <- 10 #Indice para fallecidos
M <- 5 #Indice para UCI
unique(df_1$Comunidad)
datos_com <- df_1[df_1$Comunidad == C.A, c(2, 5, 6)]
long <- dim(datos_com)[1]
datos_com <- datos_com[1: long,]
datos_xy <- matrix(rep(0, (long - K) * K), ncol = K)
for(i in 1: (long - K)){
datos_xy[i, ]<- rbind(datos_com[i: (K + i - 1), 3])
}
datos_xy <- data.frame(datos_xy, AX = datos_xy[,K] - datos_xy[,K-1])
datos_xy <- data.frame(datos_xy, AAX = datos_xy[,K] - 2 *datos_xy[,K-1]
+ datos_xy[,K-2])
datos_xy <- data.frame(datos_xy, y = datos_com[(K + 1) : long , 3] )
train <- 1:round((dim(datos_xy)[1]) * 0.8)
xy_train <- datos_xy[train,]
xy_test <- datos_xy[-train,]
xy_tomorrow <-data.frame()
roow <- tail(xy_test, 1)
xy_tomorrow <- data.frame(roow[2:K], roow[K+3])
colnames(xy_tomorrow) <- colnames(xy_test)[1:K]
#xy_tomorrow <- data.frame(X1 = roow[2], X2 = roow[3], X3 = roow[4],
#X4 = roow[5], X5 = roow[8])
xy_tomorrow <- data.frame(xy_tomorrow, AX = xy_tomorrow[,K] - xy_tomorrow[,K-1])
xy_tomorrow <- data.frame(xy_tomorrow, AAX = xy_tomorrow[,K] - 2 *xy_tomorrow[,K-1]
+ xy_tomorrow[,K-2])
model3 <- lm(y ~ paste0("X",K) + AX + AAX, data = xy_train)
prediction <- predict(model3, newdata = xy_tomorrow)
predict_com <- append(predict_com, prediction)
lastday <- append(lastday, roow[8])
}
eval(K)
assign(KK, eval(K))
variable("X10")
assign("X10", X10)
b <- assign("X10", X10)
eval(parse(text = paste0("X", K)))
b <- eval(parse(text = paste0("X", K)))
model3 <- lm(y ~ eval(parse(text = paste0("X", K))) + AX + AAX, data = xy_train)
rm(list = ls())
#Reproducir esto hasta ggplot2
library("lubridate")
library(data.table)
df <- data.frame(read.csv("serie_historica_acumulados_2.csv",
na.strings = c("", "NA")))
df$Fecha <- as.Date(df$Fecha, format = "%d/%m/%Y")
sapply(df, class)
colnames(df)[1] <- "Comunidad"
interval <- (day(df$Fecha) < 8 & month(df$Fecha) == 3) | (month(df$Fecha) < 3)
df_nan <- df[interval,]
df_1 <- df[!interval,]
df_0day <- df_nan[day(df_nan$Fecha) == 7 & month(df_nan$Fecha) == 3,]
len_1 <- length(unique(df$Comunidad))
len_1
########################################################
#######################################################
#Prediction tomorrow para todas las comunidades
predict_com <- c()
lastday <- c()
for(i in 1:length(unique(df_1$Comunidad))){
C.A <- df_1$Comunidad[i]
K <- 10 #Indice para fallecidos
M <- 5 #Indice para UCI
unique(df_1$Comunidad)
datos_com <- df_1[df_1$Comunidad == C.A, c(2, 5, 6)]
long <- dim(datos_com)[1]
datos_com <- datos_com[1: long,]
datos_xy <- matrix(rep(0, (long - K) * K), ncol = K)
for(i in 1: (long - K)){
datos_xy[i, ]<- rbind(datos_com[i: (K + i - 1), 3])
}
datos_xy <- data.frame(datos_xy, AX = datos_xy[,K] - datos_xy[,K-1])
datos_xy <- data.frame(datos_xy, AAX = datos_xy[,K] - 2 *datos_xy[,K-1]
+ datos_xy[,K-2])
datos_xy <- data.frame(datos_xy, y = datos_com[(K + 1) : long , 3] )
train <- 1:round((dim(datos_xy)[1]) * 0.8)
xy_train <- datos_xy[train,]
xy_test <- datos_xy[-train,]
xy_tomorrow <-data.frame()
roow <- tail(xy_test, 1)
xy_tomorrow <- data.frame(roow[2:K], roow[K+3])
colnames(xy_tomorrow) <- colnames(xy_test)[1:K]
#xy_tomorrow <- data.frame(X1 = roow[2], X2 = roow[3], X3 = roow[4],
#X4 = roow[5], X5 = roow[8])
xy_tomorrow <- data.frame(xy_tomorrow, AX = xy_tomorrow[,K] - xy_tomorrow[,K-1])
xy_tomorrow <- data.frame(xy_tomorrow, AAX = xy_tomorrow[,K] - 2 *xy_tomorrow[,K-1]
+ xy_tomorrow[,K-2])
model3 <- lm(y ~ eval(parse(text = paste0("X", K))) + AX + AAX, data = xy_train)
prediction <- predict(model3, newdata = xy_tomorrow)
predict_com <- append(predict_com, prediction)
lastday <- append(lastday, roow[8])
}
c1 <- unlist(lastday, use.names=FALSE)
c2 <- unlist(predict_com, use.names=FALSE)
data.frame(c1, c2)
sum(c2) - sum(c1)
########################################################
#######################################################
#Prediction tomorrow para todas las comunidades
predict_com <- c()
lastday <- c()
for(i in 1:length(unique(df_1$Comunidad))){
C.A <- df_1$Comunidad[i]
K <- 15 #Indice para fallecidos
M <- 5 #Indice para UCI
unique(df_1$Comunidad)
datos_com <- df_1[df_1$Comunidad == C.A, c(2, 5, 6)]
long <- dim(datos_com)[1]
datos_com <- datos_com[1: long,]
datos_xy <- matrix(rep(0, (long - K) * K), ncol = K)
for(i in 1: (long - K)){
datos_xy[i, ]<- rbind(datos_com[i: (K + i - 1), 3])
}
datos_xy <- data.frame(datos_xy, AX = datos_xy[,K] - datos_xy[,K-1])
datos_xy <- data.frame(datos_xy, AAX = datos_xy[,K] - 2 *datos_xy[,K-1]
+ datos_xy[,K-2])
datos_xy <- data.frame(datos_xy, y = datos_com[(K + 1) : long , 3] )
train <- 1:round((dim(datos_xy)[1]) * 0.8)
xy_train <- datos_xy[train,]
xy_test <- datos_xy[-train,]
xy_tomorrow <-data.frame()
roow <- tail(xy_test, 1)
xy_tomorrow <- data.frame(roow[2:K], roow[K+3])
colnames(xy_tomorrow) <- colnames(xy_test)[1:K]
#xy_tomorrow <- data.frame(X1 = roow[2], X2 = roow[3], X3 = roow[4],
#X4 = roow[5], X5 = roow[8])
xy_tomorrow <- data.frame(xy_tomorrow, AX = xy_tomorrow[,K] - xy_tomorrow[,K-1])
xy_tomorrow <- data.frame(xy_tomorrow, AAX = xy_tomorrow[,K] - 2 *xy_tomorrow[,K-1]
+ xy_tomorrow[,K-2])
model3 <- lm(y ~ eval(parse(text = paste0("X", K))) + AX + AAX, data = xy_train)
prediction <- predict(model3, newdata = xy_tomorrow)
predict_com <- append(predict_com, prediction)
lastday <- append(lastday, roow[8])
}
c1 <- unlist(lastday, use.names=FALSE)
c2 <- unlist(predict_com, use.names=FALSE)
data.frame(c1, c2)
########################################################
#######################################################
#Prediction tomorrow para todas las comunidades
predict_com <- c()
lastday <- c()
for(i in 1:length(unique(df_1$Comunidad))){
C.A <- df_1$Comunidad[i]
K <- 15 #Indice para fallecidos
M <- 5 #Indice para UCI
unique(df_1$Comunidad)
datos_com <- df_1[df_1$Comunidad == C.A, c(2, 5, 6)]
long <- dim(datos_com)[1]
datos_com <- datos_com[1: long,]
datos_xy <- matrix(rep(0, (long - K) * K), ncol = K)
for(i in 1: (long - K)){
datos_xy[i, ]<- rbind(datos_com[i: (K + i - 1), 3])
}
datos_xy <- data.frame(datos_xy, AX = datos_xy[,K] - datos_xy[,K-1])
datos_xy <- data.frame(datos_xy, AAX = datos_xy[,K] - 2 *datos_xy[,K-1]
+ datos_xy[,K-2])
datos_xy <- data.frame(datos_xy, y = datos_com[(K + 1) : long , 3] )
train <- 1:round((dim(datos_xy)[1]) * 0.8)
xy_train <- datos_xy[train,]
xy_test <- datos_xy[-train,]
xy_tomorrow <-data.frame()
roow <- tail(xy_test, 1)
xy_tomorrow <- data.frame(roow[2:K], roow[K+3])
colnames(xy_tomorrow) <- colnames(xy_test)[1:K]
#xy_tomorrow <- data.frame(X1 = roow[2], X2 = roow[3], X3 = roow[4],
#X4 = roow[5], X5 = roow[8])
xy_tomorrow <- data.frame(xy_tomorrow, AX = xy_tomorrow[,K] - xy_tomorrow[,K-1])
xy_tomorrow <- data.frame(xy_tomorrow, AAX = xy_tomorrow[,K] - 2 *xy_tomorrow[,K-1]
+ xy_tomorrow[,K-2])
model3 <- lm(y ~ eval(parse(text = paste0("X", K))) + AX + AAX, data = datos_xy)
prediction <- predict(model3, newdata = xy_tomorrow)
predict_com <- append(predict_com, prediction)
lastday <- append(lastday, roow[8])
}
c1 <- unlist(lastday, use.names=FALSE)
c2 <- unlist(predict_com, use.names=FALSE)
data.frame(c1, c2)
########################################################
#######################################################
#Prediction tomorrow para todas las comunidades
predict_com <- c()
lastday <- c()
for(i in 1:length(unique(df_1$Comunidad))){
C.A <- df_1$Comunidad[i]
K <- 15 #Indice para fallecidos
M <- 5 #Indice para UCI
unique(df_1$Comunidad)
datos_com <- df_1[df_1$Comunidad == C.A, c(2, 5, 6)]
long <- dim(datos_com)[1]
datos_com <- datos_com[1: long,]
datos_xy <- matrix(rep(0, (long - K) * K), ncol = K)
for(i in 1: (long - K)){
datos_xy[i, ]<- rbind(datos_com[i: (K + i - 1), 3])
}
datos_xy <- data.frame(datos_xy, AX = datos_xy[,K] - datos_xy[,K-1])
datos_xy <- data.frame(datos_xy, AAX = datos_xy[,K] - 2 *datos_xy[,K-1]
+ datos_xy[,K-2])
datos_xy <- data.frame(datos_xy, y = datos_com[(K + 1) : long , 3] )
train <- 1:round((dim(datos_xy)[1]) * 0.8)
xy_train <- datos_xy[train,]
xy_test <- datos_xy[-train,]
xy_tomorrow <-data.frame()
roow <- tail(xy_test, 1)
xy_tomorrow <- data.frame(roow[2:K], roow[K+3])
colnames(xy_tomorrow) <- colnames(xy_test)[1:K]
#xy_tomorrow <- data.frame(X1 = roow[2], X2 = roow[3], X3 = roow[4],
#X4 = roow[5], X5 = roow[8])
xy_tomorrow <- data.frame(xy_tomorrow, AX = xy_tomorrow[,K] - xy_tomorrow[,K-1])
xy_tomorrow <- data.frame(xy_tomorrow, AAX = xy_tomorrow[,K] - 2 *xy_tomorrow[,K-1]
+ xy_tomorrow[,K-2])
model3 <- lm(y ~ eval(parse(text = paste0("X", K))) + AX + AAX, data = xy_train)
prediction <- predict(model3, newdata = xy_tomorrow)
predict_com <- append(predict_com, prediction)
lastday <- append(lastday, roow[8])
}
c1 <- unlist(lastday, use.names=FALSE)
c2 <- unlist(predict_com, use.names=FALSE)
data.frame(c1, c2)
tail(df_1, 19)
data.frame(c1, c2)
tail(xy_test, 1)
xy_test
data.frame(c1, c2)
tail(df_1, 19)
data.frame(c1, c2)
tail(df_1, 19)
