rm(list = ls())

#Reproducir esto hasta ggplot2
library("lubridate")
library(data.table)
df <- data.frame(read.csv("serie_historica_acumulados_2.csv",
                          na.strings = c("", "NA")))

#Convierto a tipo fecha la columna 2                           
              
df$Fecha <- as.Date(df$Fecha, format = "%d/%m/%Y")
sapply(df, class)
colnames(df)[1] <- "Comunidad"


#Miramos NA's
library(Amelia)
missmap(df, main= "Missing Values")

#Fitro a partir de los dias que se contabilizan los muertos,
# Hago tres dataframe, el df_nan, df_1 y df_0_day

interval <- (day(df$Fecha) < 8 & month(df$Fecha) == 3) | (month(df$Fecha) < 3)
df_nan <- df[interval,]
df_1 <- df[!interval,]
df_0day <- df_nan[day(df_nan$Fecha) == 7 & month(df_nan$Fecha) == 3,]


len_1 <- length(unique(df$Comunidad))
len_1

plot(x = 1:length(df_1$Fallecidos), df_1$Fallecidos)

library(ggplot2)

ggplot(data = df_1, aes(x= Fecha, y = Fallecidos, colour = Comunidad))+
  geom_point()+
  geom_line()+
  theme_bw()
head(df_1, 15)

unique(df_1$Fecha)
unique(df$Fecha)

unique(df_1$Hospitalizados)
##############################3

rm(list = ls())
library("lubridate")
library(data.table)

df <- data.frame(read.csv("serie_historica_acumulados_2.csv",
                          na.strings = c("", "NA")))

df$Fecha <- as.Date(df$Fecha, format = "%d/%m/%Y")
sapply(df, class)
colnames(df)[1] <- "Comunidad"

interval <- (day(df$Fecha) < 8 & month(df$Fecha) == 3) | (month(df$Fecha) < 3)
df_nan <- df[interval,]
df_1 <- df[!interval,]
df_0day <- df_nan[day(df_nan$Fecha) == 7 & month(df_nan$Fecha) == 3,]



C.A <- "CT"
K <- 5 #Indice para fallecidos
M <- 5 #Indice para UCI


datos_com <- df_1[df_1$Comunidad == C.A, c(2, 5, 6)]
long <- dim(datos_com)[1] - 1
datos_com <- datos_com[1: long,]
col_fechas <- datos_com[, 1]
datos_y <- datos_com[, 3]

datos_xy <- matrix(rep(0, (long - K) * K), ncol = K)
datos_z <- matrix(rep(0, (long - M) * M), ncol = M)

for(i in 1: (long - K)){
  datos_xy[i, ]<- rbind(datos_com[i: (K + i - 1), 3])
}

datos_xy <- data.frame(datos_xy, y = datos_com[(K + 1) : long , 3] )

for(i in 1: (long - M)){
  datos_z[i, ]<- rbind(datos_com[i: (M + i - 1), 2])
}

# Le pongo la primera derivada y la Y
datos_z <- data.frame(datos_z, AZ = datos_z[,5] - datos_z[,4])
datos_z <- data.frame(datos_z, AAZ = datos_z[,5] - 2 *datos_z[,4]
                      + datos_z[,3])
datos_z <- data.frame(datos_z, y = datos_com[(M + 1) : long , 2] )

datos_z

datos_xy <- data.frame(datos_xy, AX = datos_xy[,5] - datos_xy[,4])
datos_xy <- data.frame(datos_xy, AAX = datos_xy[,5] - 2 *datos_xy[,4]
                      + datos_xy[,3])
datos_xy <- data.frame(datos_xy, y = datos_com[(M + 1) : long , 3] )

datos_xy




#Probamos un modelo lineal con datos_z

train <- 1:round((dim(datos_z)[1]) * 0.8)
z_train <- datos_z[train,]
z_test <- datos_z[-train,]
datos_z

model <- lm(y ~ ., data = z_train)
summary(model)

model2 <- lm(y ~ X4 + X5, data = z_train)
summary(model2)

model3 <- lm(y ~ X5 + AZ + AAZ, data = z_train)
summary(model3)

predictions <- predict(model3, newdata = z_test[,c(1:7)])
z_test$y
plot(1:length(z_test$y), abs(z_test$y - predictions) )
predictions
abs(z_test$y - predictions)

#Probamos un modelo lineal con datos_x -- FALLECIDOSX
train <- 1:round((dim(datos_xy)[1]) * 0.8)
xy_train <- datos_xy[train,]
xy_test <- datos_xy[-train,]

model3 <- lm(y ~ X5 + AX + AAX, data = xy_train)
summary(model3)

predictions <- predict(model3, newdata = xy_test[,c(1:7)])
xy_test$y
predictions
plot(1:length(xy_test$y), abs(xy_test$y - predictions) )
predictions
abs(xy_test$y - predictions)

roow <- tail(xy_test, 1)

########################################################
#######################################################
#Prediction tomorrow para todas las comunidades
predict_com <- c()
lastday <- c()

for(i in 1:length(unique(df_1$Comunidad))){
  
  C.A <- df_1$Comunidad[i]
  K <- 15 #Indice para fallecidos
  M <- 5 #Indice para UCI

  unique(df_1$Comunidad)
  datos_com <- df_1[df_1$Comunidad == C.A, c(2, 5, 6)]
  long <- dim(datos_com)[1]
  datos_com <- datos_com[1: long,]

  datos_xy <- matrix(rep(0, (long - K) * K), ncol = K)


  for(i in 1: (long - K)){
    datos_xy[i, ]<- rbind(datos_com[i: (K + i - 1), 3])
  }

  
  datos_xy <- data.frame(datos_xy, AX = datos_xy[,K] - datos_xy[,K-1])
  datos_xy <- data.frame(datos_xy, AAX = datos_xy[,K] - 2 *datos_xy[,K-1]
                         + datos_xy[,K-2])
  datos_xy <- data.frame(datos_xy, y = datos_com[(K + 1) : long , 3] )
  
  
   train <- 1:round((dim(datos_xy)[1]) * 0.8)
  xy_train <- datos_xy[train,]
  xy_test <- datos_xy[-train,]

  xy_tomorrow <-data.frame()
  roow <- tail(xy_test, 1)
  xy_tomorrow <- data.frame(roow[2:K], roow[K+3])
  colnames(xy_tomorrow) <- colnames(xy_test)[1:K]

  
  #xy_tomorrow <- data.frame(X1 = roow[2], X2 = roow[3], X3 = roow[4],
                            #X4 = roow[5], X5 = roow[8])
  xy_tomorrow <- data.frame(xy_tomorrow, AX = xy_tomorrow[,K] - xy_tomorrow[,K-1])
  xy_tomorrow <- data.frame(xy_tomorrow, AAX = xy_tomorrow[,K] - 2 *xy_tomorrow[,K-1]
                          + xy_tomorrow[,K-2])

  model3 <- lm(y ~ eval(parse(text = paste0("X", K))) + AX + AAX, data = xy_train)
  prediction <- predict(model3, newdata = xy_tomorrow)

  predict_com <- append(predict_com, prediction)
  lastday <- append(lastday, roow[8])
}
c1 <- unlist(lastday, use.names=FALSE)
c2 <- unlist(predict_com, use.names=FALSE)

data.frame(c1, c2)
predict_com
data.frame(x1 = c(1, 2, 3), x2 = c(1, 2, 3))
sum(c2) - sum(c1)

pred_acum_deaths <- sum(predict_com)
pred_acum_deaths
total_deaths(sum)
xy_test

b <- eval(parse(text = paste0("X", K))) 
acum_deaths <- sum(tail(df_1$Fallecidos, 19))
acum_deaths

b <- assign("X10", X10)

assign(KK, eval(K))



a <- c(1, 2, 3)
tail(a, 1)
xy_tomorrow2 <- data.frame(roow[2:K], roow[K+3], roow[K+1], roow[K+2])
xy_tomorrow2













# MODELO RANDOM FOREST  (2O modelo que he visto de regresion)
library(tree)
model4 <- tree(y ~ ., data = z_train)
predictions <- predict(model4, newdata = z_train[,c(1:7)])
z_train$y
predictions
abs(z_test$y - predictions)

#ERRORES
error = mean((z_test$y - predictions)^2)
plot(1:4,abs(z_test$y - predictions), type = "line" )
points(1:4,abs(z_test$y - predictions))


